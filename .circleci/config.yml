version: 2.1

orbs:
  aws-cli: circleci/aws-cli@2.0.0


parameters:
  onSchedule:
    type: string
    default: ""
  dockerImage:
    type: string
    default: ""
  dockerImageTag:
    type: string
    default: ""


jobs:
  build:
    machine:
      image: ubuntu-2004:202010-01

    working_directory: ~/repo
    
    environment:
      onSchedule: << pipeline.parameters.onSchedule >>
      dockerImage: << pipeline.parameters.dockerImage >>
      dockerImageTag: << pipeline.parameters.dockerImageTag >>

    steps:
      - checkout
      - aws-cli/install

      - run:
          name:
          command: |
            if [[ ! -z $dockerImage ]]; then
              echo "Starting build"
              echo "  docker file: "$dockerImage
              echo "  docker image tag: "$dockerImageTag
              echo
            fi

      - run:
          name: Building docker images
          command: |
            if [[ -z $dockerImage ]]; then
              DIR_DOCKER_FILES="autobuild"

              if [[ -z $onSchedule ]]; then
                DIFF_FILES=$(git diff --numstat HEAD^ | grep $DIR_DOCKER_FILES | awk '{print $3}')
                if [ ! ${DIFF_FILES[@]} ]; then echo "STOP"; circleci-agent step halt; fi
                FILES=${DIFF_FILES[@]}
              else
                FILES=$(ls $DIR_DOCKER_FILES/*)
              fi
              
              for FILE in ${FILES[@]}; do
              echo "Starting build "$FILE; echo
                  IMAGE_TAG=$(grep "IMAGE_TAG" $FILE | awk '{print $3}')
                  if [ ! -z "$IMAGE_TAG" ]; then
                    curl --location --request POST 'https://circleci.com/api/v2/project/github/darwinapps/deploy/pipeline' \
                    --header 'Content-Type: application/json' \
                    --data '{"branch": "master", "parameters": {"onSchedule":"'"${onSchedule}"'","dockerImage":"'"${FILE}"'","dockerImageTag":"'"${IMAGE_TAG}"'"}}' \
                    --header "Circle-Token: ${API_TOKEN}"
                  fi
              done
            else
              REGISTRY_HOST=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com
              aws ecr get-login-password | docker login --username AWS --password-stdin $REGISTRY_HOST
              docker build -t $REGISTRY_HOST/$dockerImageTag -f ./$dockerImage .
              docker push $REGISTRY_HOST/$dockerImageTag
            fi

      - run:
          command: echo "export onBUILD=0" >> $BASH_ENV
          when: on_success

      - run:
          command: echo "export onBUILD=1" >> $BASH_ENV
          when: on_fail

      - run:
          name: Send message to Committer
          command: |
            Committer=$(git log -1 --pretty=format:"%ce")
            Commithash=$(git log -1 --pretty=format:"%h")
            Commitstr=$(git log -1 --pretty=format:"%s")

            t1=$(date +"%H:%M:%S")
            t2=$(git log -1 --pretty=format:"%cd" --date=rfc2822)
            t2=$(date -u -d "$t2" +"%H:%M:%S")
            t3=$(date -u -d "0 $(date -u -d "$t1" +"%s") sec - $(date -u -d "$t2" +"%s") sec" +"%H:%M:%S")

            if [[ -z $dockerImage ]]; then
              Subjectstr='SUCCESS! Commit '$Commithash' ('$Commitstr') was built successfully ('$t3')!'
              Messagestr='The build on the branch '$CIRCLE_BRANCH' in the project '$CIRCLE_PROJECT_USERNAME'/'$CIRCLE_PROJECT_REPONAME' on CircleCI completed successfully!'
            else
              Subjectstr='SUCCESS! The build of the docker image 'dockerImageTag' from file '$dockerImage' was successful!'
              Messagestr='SUCCESS! The build of the docker image 'dockerImageTag' from file '$dockerImage' was successful!'
            fi

            if [ $onBUILD -eq 1 ]; then
              if [[ -z $dockerImage ]]; then
                Subjectstr='FAILED! Commit '$Commithash' ('$Commitstr') was built unsuccessfully ('$t3')!'
                Messagestr=$(printf "%s\r\n%s\n" "The build on the branch $CIRCLE_BRANCH in the project $CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME on CircleCI failed!"\
                                                 "Please contact the devops engineer at DarwinApps.")
              else
                Subjectstr='FAILED! The build of the docker image 'dockerImageTag' from file '$dockerImage' was unsuccessful!'
                Messagestr='FAILED! The build of the docker image 'dockerImageTag' from file '$dockerImage' was unsuccessful!'
              fi
            fi

            curl -s --user 'api:'$MAILGUN_APIKEY\
              https://api.mailgun.net/v3/$MAILGUN_DOMAIN/messages\
              -F from='CircleCI <'$MAILGUN_FROM'>'\
              -F to=$Committer\
              -F subject="""$Subjectstr"""\
              -F text="""$Messagestr"""
          when: always


workflows:
  main_build:
    jobs:
      - build:
          filters:
            branches:
              only:
                - master
